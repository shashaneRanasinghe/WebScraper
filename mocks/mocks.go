// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/shashaneRanasinghe/WebScraper/interfaces"
	models "github.com/shashaneRanasinghe/WebScraper/models"
)

// MockWebScraper is a mock of WebScraper interface.
type MockWebScraper struct {
	ctrl     *gomock.Controller
	recorder *MockWebScraperMockRecorder
}

// MockWebScraperMockRecorder is the mock recorder for MockWebScraper.
type MockWebScraperMockRecorder struct {
	mock *MockWebScraper
}

// NewMockWebScraper creates a new mock instance.
func NewMockWebScraper(ctrl *gomock.Controller) *MockWebScraper {
	mock := &MockWebScraper{ctrl: ctrl}
	mock.recorder = &MockWebScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebScraper) EXPECT() *MockWebScraperMockRecorder {
	return m.recorder
}

// Scrape mocks base method.
func (m *MockWebScraper) Scrape(URL string, h interfaces.Helper) models.WebScraperResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrape", URL, h)
	ret0, _ := ret[0].(models.WebScraperResponse)
	return ret0
}

// Scrape indicates an expected call of Scrape.
func (mr *MockWebScraperMockRecorder) Scrape(URL, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrape", reflect.TypeOf((*MockWebScraper)(nil).Scrape), URL, h)
}

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Route mocks base method.
func (m *MockRouter) Route() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockRouterMockRecorder) Route() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouter)(nil).Route))
}

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// FindElementCount mocks base method.
func (m *MockHelper) FindElementCount(pageContent string, elementList []string) map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindElementCount", pageContent, elementList)
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// FindElementCount indicates an expected call of FindElementCount.
func (mr *MockHelperMockRecorder) FindElementCount(pageContent, elementList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindElementCount", reflect.TypeOf((*MockHelper)(nil).FindElementCount), pageContent, elementList)
}

// GetLinkCount mocks base method.
func (m *MockHelper) GetLinkCount(pageContent, currentURL string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkCount", pageContent, currentURL)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkCount indicates an expected call of GetLinkCount.
func (mr *MockHelperMockRecorder) GetLinkCount(pageContent, currentURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkCount", reflect.TypeOf((*MockHelper)(nil).GetLinkCount), pageContent, currentURL)
}

// SearchElements mocks base method.
func (m *MockHelper) SearchElements(pageContent, regex string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchElements", pageContent, regex)
	ret0, _ := ret[0].([]string)
	return ret0
}

// SearchElements indicates an expected call of SearchElements.
func (mr *MockHelperMockRecorder) SearchElements(pageContent, regex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchElements", reflect.TypeOf((*MockHelper)(nil).SearchElements), pageContent, regex)
}
